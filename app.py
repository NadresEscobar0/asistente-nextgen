import streamlit as st
import google.generativeai as genai
import re
import requests
from io import BytesIO
from PIL import Image

st.set_page_config(page_title="VictorIA Nexus - Asistente Acad√©mico Adaptativo", page_icon="üß†")

# API Key y modelo
API_KEY = "AIzaSyDDgVzgub-2Va_5xCVcKBU_kYtpqpttyfk"
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# T√≠tulo con emojis
st.title("VictorIA Nexus üß†üí™‚úùÔ∏è")
st.markdown("""
<div style="text-align: center; margin-bottom: 2.5rem;">
    <b>
    <span style='font-size:1.3em; color:#2b7de9;'>¬°Bienvenido a VictorIA Nexus!</span><br><br>
    Mucho m√°s que un asistente: VictorIA Nexus es el puente entre tu curiosidad y el conocimiento.<br><br>
    Esta plataforma de inteligencia artificial adaptativa no solo responde preguntas, sino que gu√≠a, inspira y personaliza cada interacci√≥n seg√∫n tu estilo de aprendizaje.<br><br>
    Inspirada en la pedagog√≠a y la tecnolog√≠a, VictorIA Nexus fomenta el pensamiento cr√≠tico, la creatividad y la autonom√≠a. Aqu√≠, cada consulta es una oportunidad para descubrir, reflexionar y crecer.<br><br>
    <span style='color: #2b7de9;'>Elige tu estilo de aprendizaje, plantea tu reto acad√©mico y deja que VictorIA Nexus te acompa√±e en el viaje de transformar dudas en descubrimientos. No solo obtendr√°s respuestas, sino caminos para aprender y crear.</span>
    </b>
</div>
""", unsafe_allow_html=True)

# --- Generador de im√°genes IA ---
st.header("Generador de Im√°genes por IA (Gratis)")
prompt_img = st.text_input("Describe la imagen educativa que quieres generar:")

if st.button("Generar imagen IA"):
    if prompt_img.strip():
        with st.spinner("Generando imagen..."):
            url = "https://api.kieai.tech/v1/generate"
            payload = {"prompt": prompt_img}
            try:
                response = requests.post(url, json=payload, timeout=60)
                response.raise_for_status()
                img_url = response.json().get("image_url")
                if img_url:
                    img_data = requests.get(img_url).content
                    image = Image.open(BytesIO(img_data))
                    st.image(image, caption="Imagen generada por IA", use_column_width=True)
                else:
                    st.warning("No se pudo generar la imagen. Intenta con otra descripci√≥n.")
            except Exception as e:
                st.error(f"Error al generar imagen: {e}")
    else:
        st.warning("Por favor, escribe una descripci√≥n para la imagen.")

# --- Selecci√≥n de estilo de aprendizaje ---
estilo = st.selectbox(
    "¬øCu√°l es tu estilo de aprendizaje preferido?",
    ("Visual", "Auditivo", "Kinest√©sico")
)

if "historial" not in st.session_state:
    st.session_state.historial = []

def construir_prompt(pregunta, estilo):
    pregunta_baja = pregunta.lower()
    if (
        "qui√©n te desarroll√≥" in pregunta_baja
        or "quien te desarroll√≥" in pregunta_baja
        or "qui√©n es tu creador" in pregunta_baja
        or "quien es tu creador" in pregunta_baja
        or "autor" in pregunta_baja
        or "qui√©n lo hizo" in pregunta_baja
        or "quien lo hizo" in pregunta_baja
        or "desarrollador" in pregunta_baja
        or "creador" in pregunta_baja
    ):
        return "Por favor, responde √∫nicamente: 'Fui desarrollado por Pedro Tovar.'"
    base = (
        "Eres VictorIA Nexus, una asistente acad√©mica √©tica, creativa y adaptativa. "
        "Prioriza siempre responder de forma clara, extensa y concreta a la pregunta planteada, "
        "proporcionando una explicaci√≥n detallada, profunda y bien desarrollada, con ejemplos y contexto para que cualquier estudiante pueda comprender a fondo el tema. "
        "No seas breve ni superficial. "
        "Despu√©s de la respuesta, a√±ade una explicaci√≥n creativa, extensa y adaptada √∫nicamente al estilo de aprendizaje indicado, "
        "con el objetivo de fomentar el aprendizaje real, la creatividad y el pensamiento cr√≠tico. "
        "Desarrolla la explicaci√≥n y utiliza recursos propios del estilo elegido. "
        "Nunca menciones que eres de Google, Gemini, Streamlit, ni ning√∫n proveedor externo. "
        "Si te preguntan por tu creador, responde √∫nicamente: 'Fui desarrollado por Pedro Tovar.'"
    )
    if estilo == "Visual":
        detalle = "Despu√©s de la respuesta, utiliza analog√≠as visuales, descripciones gr√°ficas, esquemas mentales, mapas conceptuales o ejemplos visuales. No expliques otros estilos."
    elif estilo == "Auditivo":
        detalle = "Despu√©s de la respuesta, utiliza ejemplos auditivos, relatos, met√°foras sonoras, explicaciones habladas o historias narradas. No expliques otros estilos."
    else:
        detalle = "Despu√©s de la respuesta, sugiere actividades pr√°cticas, ejemplos kinest√©sicos, ejercicios paso a paso y propuestas que impliquen acci√≥n f√≠sica. No expliques otros estilos."
    return f"{base} Estilo de aprendizaje: {estilo}. {detalle} Pregunta: {pregunta}"

def limpiar_html(texto):
    texto_limpio = re.sub(r'</?div[^>]*>', '', texto)
    return texto_limpio.strip()

# Historial y flujo de chat
if st.session_state.historial:
    st.markdown("### Historial de Interacciones")
    for i, entrada in enumerate(st.session_state.historial[::-1], 1):
        respuesta_limpia = limpiar_html(entrada['respuesta'])
        st.markdown(f"""
        <div style="
            background-color:#1b4a7a;
            border-radius:10px;
            padding:1em;
            margin-bottom:0.5em;
            color:#ffffff;">
            <b><span style="color:#FFD700;">{i}. T√∫:</span></b> {entrada['pregunta']}<br>
            <b><span style="color:#87CEEB;">VictorIA Nexus:</span></b> {respuesta_limpia}
        </div>
        """, unsafe_allow_html=True)
else:
    st.info("¬°Haz tu primera pregunta acad√©mica abajo para comenzar!")

# Chat input est√°ndar y seguro
pregunta = st.text_input("Haz tu pregunta acad√©mica aqu√≠...", max_chars=500)
if st.button("Preguntar"):
    if pregunta.strip():
        pregunta_baja = pregunta.lower()
        # Respuesta de autor√≠a directa
        if (
            "qui√©n te desarroll√≥" in pregunta_baja
            or "quien te desarroll√≥" in pregunta_baja
            or "qui√©n es tu creador" in pregunta_baja
            or "quien es tu creador" in pregunta_baja
            or "autor" in pregunta_baja
            or "qui√©n lo hizo" in pregunta_baja
            or "quien lo hizo" in pregunta_baja
            or "desarrollador" in pregunta_baja
            or "creador" in pregunta_baja
        ):
            respuesta = "Fui desarrollado por Pedro Tovar."
            respuesta_limpia = respuesta
        else:
            prompt = construir_prompt(pregunta, estilo)
            try:
                respuesta = model.generate_content(prompt)
                respuesta = respuesta.text
            except Exception as e:
                respuesta = f"Error al generar respuesta: {e}"
            respuesta_limpia = limpiar_html(respuesta)
        st.session_state.historial.append({"pregunta": pregunta, "respuesta": respuesta_limpia})
        st.markdown(f"""
        <div style="
            background-color:#1b4a7a;
            border-radius:10px;
            padding:1em;
            margin-bottom:0.5em;
            color:#ffffff;">
            <b><span style="color:#FFD700;">T√∫:</span></b> {pregunta}<br>
            <b><span style="color:#87CEEB;">VictorIA Nexus:</span></b> {respuesta_limpia}
        </div>
        """, unsafe_allow_html=True)
    else:
        st.warning("Por favor, escribe una pregunta antes de continuar.")

# --- FIRMA LEGAL ---
st.markdown("""
---
**¬© 2025 Pedro Tovar. Todos los derechos reservados.**  
Esta aplicaci√≥n fue desarrollada por Pedro Tovar para fines acad√©micos. Prohibida su reproducci√≥n total o parcial sin autorizaci√≥n.
""")
